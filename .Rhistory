devtools::load_all(".")
modele_risque(donnees,facteurs)
devtools::load_all(".")
modele_risque(donnees,facteurs)
devtools::load_all(".")
devtools::load_all(".")
modele_risque(donnees,facteurs)
modele_risque(donnees,facteurs)
devtools::load_all(".")
modele_risque(donnees,facteurs)
rendements_attendus <- c(0.05, 0.04, 0.06, 0.03, 0.02)
covariance=matrice_covariance(donnees)
optim_portefeuille(covariance,rendements_attendus,niveau_risque)
devtools::load_all(".")
devtools::load_all(".")
optim_portefeuille(covariance,rendements_attendus,niveau_risque)
analyse_composantes_principales(donnees)
devtools::load_all(".")
devtools::load_all(".")
analyse_composantes_principales(donnees)
devtools::load_all(".")
devtools::load_all(".")
analyse_composantes_principales(donnees)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
analyse_composantes_principales(donnees)
# Charger le package testthat
library(testthat)
# Charger les fonctions à tester
source("OptimisationDuporteFeuille")  # Remplacez "mon_script_fonctions.R" par le nom de votre script avec les fonctions
# Charger le package 'testthat' pour les tests
library(testthat)
# Charger le package principal (OptimisationDuporteFeuille) pour tester les fonctions
library(OptimisationDuporteFeuille)
# Charger le package 'testthat' pour les tests
library(testthat)
# Charger le package principal (OptimisationDuporteFeuille) pour tester les fonctions
library(OptimisationDuporteFeuille)
library(OptimisationDuPorteFeuille)
# Charger le package 'testthat' pour les tests
library(testthat)
# ---------------------------------------------------------
# Test 1 : Test de la fonction matrice_covariance
# ---------------------------------------------------------
test_that("Test matrice_covariance renvoie une matrice carrée", {
# Créer des données de test
set.seed(123)
donnees <- data.frame(
variable_1 = rnorm(100, mean = 0, sd = 1),
variable_2 = rnorm(100, mean = 5, sd = 2),
variable_3 = rnorm(100, mean = -3, sd = 0.5)
)
# Calculer la matrice de covariance
covariance <- matrice_covariance(donnees)
# Vérifier que c'est une matrice carrée
expect_true(is.matrix(covariance))
expect_equal(nrow(covariance), ncol(covariance))  # La matrice de covariance doit être carrée
})
# ---------------------------------------------------------
# Test 2 : Test du modèle de risque
# ---------------------------------------------------------
test_that("Test modele_risque renvoie un vecteur de coefficients", {
# Créer des données de test
set.seed(123)
donnees <- data.frame(variable_1 = rnorm(100, mean = 0, sd = 1))
facteurs <- data.frame(facteur_1 = rnorm(100, mean = 2, sd = 0.5), facteur_2 = rnorm(100, mean = 3, sd = 1))
# Calculer le modèle de risque
beta <- modele_risque(donnees$variable_1, facteurs)
# Vérifier que le modèle renvoie un vecteur
expect_true(is.vector(beta))
expect_equal(length(beta), 1 + ncol(facteurs))  # 1 pour l'intercept + ncol(facteurs)
})
# Charger le package 'testthat' pour les tests
# ---------------------------------------------------------
# Test 1 : Test de la fonction matrice_covariance
# ---------------------------------------------------------
test_that("Test matrice_covariance renvoie une matrice carrée", {
# Créer des données de test
set.seed(123)
donnees <- data.frame(
variable_1 = rnorm(100, mean = 0, sd = 1),
variable_2 = rnorm(100, mean = 5, sd = 2),
variable_3 = rnorm(100, mean = -3, sd = 0.5)
)
# Calculer la matrice de covariance
covariance <- matrice_covariance(donnees)
# Vérifier que c'est une matrice carrée
expect_true(is.matrix(covariance))
expect_equal(nrow(covariance), ncol(covariance))  # La matrice de covariance doit être carrée
})
# ---------------------------------------------------------
# Test 2 : Test du modèle de risque
# ---------------------------------------------------------
test_that("Test modele_risque renvoie un vecteur de coefficients", {
# Créer des données de test sous forme de data.frame
set.seed(123)
donnees <- data.frame(variable_1 = rnorm(100, mean = 0, sd = 1))  # Ceci est maintenant un data.frame
facteurs <- data.frame(facteur_1 = rnorm(100, mean = 2, sd = 0.5), facteur_2 = rnorm(100, mean = 3, sd = 1))  # data.frame pour les facteurs
# Calculer le modèle de risque
beta <- modele_risque(donnees, facteurs)  # Passer les deux arguments comme data.frame
# Vérifier que le modèle renvoie un vecteur
expect_true(is.vector(beta))
expect_equal(length(beta), 1 + ncol(facteurs))  # 1 pour l'intercept + ncol(facteurs)
})
# Charger le package 'testthat' pour les tests
# Charger le package principal (OptimisationDuporteFeuille) pour tester les fonctions
# ---------------------------------------------------------
# Test 1 : Test de la fonction matrice_covariance
# ---------------------------------------------------------
test_that("Test matrice_covariance renvoie une matrice carrée", {
# Créer des données de test
set.seed(123)
donnees <- data.frame(
variable_1 = rnorm(100, mean = 0, sd = 1),
variable_2 = rnorm(100, mean = 5, sd = 2),
variable_3 = rnorm(100, mean = -3, sd = 0.5)
)
# Calculer la matrice de covariance
covariance <- matrice_covariance(donnees)
# Vérifier que c'est une matrice carrée
expect_true(is.matrix(covariance))
expect_equal(nrow(covariance), ncol(covariance))  # La matrice de covariance doit être carrée
})
# ---------------------------------------------------------
# Test 2 : Test du modèle de risque
# ---------------------------------------------------------
test_that("Test modele_risque renvoie un vecteur de coefficients", {
# Créer des données de test sous forme de data.frame
set.seed(123)
donnees <- data.frame(variable_1 = rnorm(100, mean = 0, sd = 1))  # Ceci est maintenant un data.frame
facteurs <- data.frame(facteur_1 = rnorm(100, mean = 2, sd = 0.5), facteur_2 = rnorm(100, mean = 3, sd = 1))  # data.frame pour les facteurs
# Vérifier les noms des colonnes pour s'assurer qu'ils correspondent à la formule
# Ici, la formule devrait être 'variable_1 ~ facteur_1 + facteur_2'
# Calculer le modèle de risque
beta <- modele_risque(donnees, facteurs)  # Passer les deux arguments comme data.frame
# Vérifier que le modèle renvoie un vecteur
expect_true(is.vector(beta))
expect_equal(length(beta), 1 + ncol(facteurs))  # 1 pour l'intercept + ncol(facteurs)
})
# Charger le package 'testthat' pour les tests
# Charger le package principal (OptimisationDuporteFeuille) pour tester les fonctions
# ---------------------------------------------------------
# Test 1 : Test de la fonction matrice_covariance
# ---------------------------------------------------------
test_that("Test matrice_covariance renvoie une matrice carrée", {
# Créer des données de test
set.seed(123)
donnees <- data.frame(
variable_1 = rnorm(100, mean = 0, sd = 1),
variable_2 = rnorm(100, mean = 5, sd = 2),
variable_3 = rnorm(100, mean = -3, sd = 0.5)
)
# Calculer la matrice de covariance
covariance <- matrice_covariance(donnees)
# Vérifier que c'est une matrice carrée
expect_true(is.matrix(covariance))
expect_equal(nrow(covariance), ncol(covariance))  # La matrice de covariance doit être carrée
})
# ---------------------------------------------------------
# Test 2 : Test du modèle de risque
# ---------------------------------------------------------
test_that("Test modele_risque renvoie un vecteur de coefficients", {
# Créer des données de test sous forme de data.frame
set.seed(123)
# Données pour la variable dépendante 'actif_1' et des facteurs explicatifs
donnees <- data.frame(
actif_1 = rnorm(100, mean = 0, sd = 1)  # variable cible 'actif_1'
)
# Facteurs pour les variables explicatives
facteurs <- data.frame(
facteur_1 = rnorm(100, mean = 2, sd = 0.5),
facteur_2 = rnorm(100, mean = 3, sd = 1)
)
# Vérifier que 'donnees' contient bien 'actif_1'
expect_true("actif_1" %in% colnames(donnees))
# Vérifier que 'facteurs' contient les bonnes colonnes
expect_true(all(c("facteur_1", "facteur_2") %in% colnames(facteurs)))
# Calculer le modèle de risque
beta <- modele_risque(donnees, facteurs)  # Passer les deux arguments comme data.frame
# Vérifier que le modèle renvoie un vecteur
expect_true(is.vector(beta))
# Vérifier la longueur du vecteur de coefficients
# Il doit avoir 1 pour l'intercept et un coefficient pour chaque facteur
expect_equal(length(beta), 1 + ncol(facteurs))  # 1 pour l'intercept + ncol(facteurs)
# Vérifier que les coefficients sont numériques
expect_true(all(is.numeric(beta)))
})
library(OptimisationDuPorteFeuille)
library(testthat)
devtools::load_all(".")
devtools::document()
?matrice_covariance
devtools::load_all(".")
devtools::document()
?matrice_covariance
?modele_risque
?analyse_composantes_principales
roxygen2::roxygenise()
devtools::load_all(".")
?matrice_covariance
devtools::load_all(".")
?matrice_covariance
roxygen2::roxygenise()
devtools::load_all(".")
?matrice_covariance
devtools::load_all(".")
?analyse_composantes_principales
devtools::load_all(".")
?analyse_composantes_principales
?modele_risque
?matrice_covariance
?matrix
?matrice_covariance
?analyse_composantes_principales
?modele_risque
?modele_risque
?modele_risque
?modele_risque
donnees
modele_risque(donnees,facteurs)
donnee=data.frame(x=rnorm(100),y=rnorm(100))
modele_risque(donnee,facteurs)
donnee=data.frame(actif_1=rnorm(100),actif_2=rnorm(100))
modele_risque(donnee,facteurs)
devtools::load_all(".")
?modele_risque
library(OptimisationDuPorteFeuille)
devtools::load_all(".")
devtools::load_all(".")
devtools::install_deps()
devtools::load_all(".")
?optim_portefeuille
?matrice_covariance
devtools::load_all(".")
?matrice_covariance
?optim_portefeuille
devtools::install_deps("quadprog")
library(quadprog)
?optim_portefeuille
?modele_risque
?optim_portefeuille
devtools::load_all(".")
# Test de la fonction matrice_covariance
test_that("Test matrice_covariance renvoie une matrice de covariance correcte", {
# Exemple de données
donnees <- data.frame(
actif_1 = c(0.01, 0.02, -0.01, 0.03),
actif_2 = c(0.03, 0.02, 0.01, 0.02)
)
# Appel de la fonction matrice_covariance
covariance <- matrice_covariance(donnees)
# Vérification que la sortie est une matrice
expect_s3_class(covariance, "matrix")
# Vérifier que la matrice est carrée
expect_equal(nrow(covariance), ncol(covariance))
# Vérifier que les éléments de la diagonale sont positifs (variance des actifs)
expect_true(all(diag(covariance) >= 0))
})
devtools::load_all(".")
library(quadprog)
devtools::load_all(".")
?matrice_covariance
library(ggplot2)
library(quadprog)
library(tidyverse
library(tidyverse
library(tidyverse)
library(nycflights13)
view(flights)
flights_sml=select(flights,year:day,ends_with("delay"),distance,air_time)
flights_sml
mutate(flights_sml,gain=arr_delay-dep_delay)
speed=(distance/air_time*60)
speed=(distance/air_time*60)
mutate(flights_sml,gain=arr_delay-dep_delay,speed=(distance/air_time*60)
mutate(flights_sml,gain=arr_delay-dep_delay,speed=distance/air_time*60)
mutate(flights_sml,gain=arr_delay-dep_delay,speed=distance/air_time*60)
mutate(flights_sml,gain-arr_delay-dep_delay,hours=air_time/60,gain_per_hour=gain/hours)
mutate(flights_sml,gain=arr_delay-dep_delay,hours=air_time/60,gain_per_hour=gain/hours)
transmute(flights,gain=arr_delay-dep_delay,hours=air_time/60,gain_per_hour=gain/hours)
5%/%2
x==y*(x%/%)+(x%%y)
x==y*(x%/%y)+(x%%y)
transmute(flights,dep_time,hour=dep_time%/%100,minute=dep_time%%100)
log(exp(1))
2-lag(2)
2!-lag(2)
2*1-lag(2)
(x=1:10)
lead(x)
log(x)
?lead
lag(x)
y=lag(x)
lag(y)
install.packages("RccpRoll")
install.packages("RccpRoll")
cumsum(x)
cummean(x)
mean(x)
y=c(1,2,2,NA,3,4)
y
min_rank(y)
min_rank(desc(y))
y
row_number(y)
dense_rank(y)
cume_dist(y)
percent_rank(y)
?percent_rank()
1:3+1:10
a=1:3
b=1:10
a+b
cos(30)
sin(0)
cos(0)
?cos
atan2(0,0)
atan2(0,1)
tan(0)
tan(1)
atan(0)
atan(1)
atan2(0,1)
atan2(1,0)
?atan2(1,0)
?atan2
summarize_(flights,delay=mean(dep_delay,na.rm=T))
summarize(flights,delay=mean(dep_delay,na.rm=T))
summarise(flights,delay=mean(dep_delay,na.rm=T))
?summarize
summarise(flights,delay=mean(dep_delay))
mean(dep_delay)
by_day=group_by(flights,year,month,day)
summarise(by_day,delay=mean(dep_delay,na.rm=T))
summarize(by_day,delay=mean(dep_delay,na.rm=T))
by_day
select(by_day,delay=mean(dep_delay,na.rm=T))
by_day
select(by_day,delay=mean(dep_delay,na.rm=TRUE))
summarize(by_day,delay=mean(dep_delay,na.rm=T))
by_dest=group_by(flights,dest)
delay=summarise(by_dest,count=n(),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T)
delay=summarise(by_dest,count=n(),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T)
delay=summarise(by_dest,count=n(),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T))
delay2=filter(delay,count>0,dest!="HNL")
ggplot(delay2,aes(dist,delay2))+geom_point(aes(size = count),alpha=1/3)+geom_smooth(se=F)
delay=summarise(by_dest,count=n(),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T)
delay=summarise(by_dest,count=n(),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T))
delay=summarise(by_dest,count=n(),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T))
delay
delay2
ggplot(delay2,aes(dist,delay2))+geom_point(aes(size = count),alpha=1/3)+geom_smooth(se=F)
delay2=filter(delay,count>20,dest!="HNL")
ggplot(delay2,aes(dist,delay2))+geom_point(aes(size = count),alpha=1/3)+geom_smooth(se=F)
ggplot(delay,aes(dist,delay))+geom_point(aes(size = count),alpha=1/3)+geom_smooth(se=F)
delays=flights %>%
group_by(dest) %>%
summarise(count=n()),
delays=flights %>%
group_by(dest) %>%
summarise(count=n()),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T) %>%
delays=flights %>%
group_by(dest) %>%
summarise(count=n()),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T) %>% filter(count>20,dest!="HNL")
delays=flights %>%
+ group_by(dest) %>% ,
delays=flights %>%
+ group_by(dest) %>%
+ summarise(count=n()),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T) %>% filter(count>20,dest!="HNL")
delays=flights %>%
+ group_by(dest) %>%
+ summarize(count=n()),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T) %>% filter(count>20,dest!="HNL")
delays=flights %>% group_by(dest) %>%summarize(count=n()),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T) %>% filter(count>20,dest!="HNL")
flights %>%
group_by(year,month,day) %>%
summarize(mean(dep_delay))
delays=flights %>% +group_by(dest) %>%summarize(count=n()),dist=mean(distance,na.rm=T),delay=mean(arr_delay,na.rm=T) %>% filter(count>20,dest!="HNL")
delays=flights %>%
group_by(dest) %>%
summarize(count=n()),
median(x)
first(x)
nth(x,2)
last(x)
x
nth(x,6)
not_cancelled=flights %>%
filter(is.na(dep_delay)),is.na(arr_delay)
not_cancelled=flights %>%
filter(!is.na(dep_delay)),is.na(arr_delay)
not_cancelled=flights %>%
filter(!is.na(dep_delay),is.na(arr_delay))
nth(not_cancelled,20)
nth(not_cancelled,31)
nth(not_cancelled,47)
not_cancelled=flights %>%
group_by(year,month,day) %>% summarise(first_dep=first(dep_time),last_dep=last(dep_time))
not_cancelled=flights %>%
group_by(year,month,day) %>% summarise(first_dep=first(dep_time),last_dep=last(dep_time))
not_cancelled=flights %>%
group_by(year,month,day) %>% summarise(first_dep=first(dep_time),last_dep=last(dep_time))
not_cancelled=flights %>%
group_by(year,month,day) %>%
summarise(first_dep=first(dep_time),last_dep=last(dep_time))
not_cancelled %>%
group_by(year,month,day) %>%
mutate(r=min_rank(desc(dep_time))) %>%
filter(r%in%range(r))
not_cancelled %>%
group_by(year,month,day) %>%
filter(r%in%range(r))
not_cancelled %>%
group_by(year,month,day) %>%
mutate(r=min_rank(desc(dep_time))) %>%
filter(r%in%range(r))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
not_cancelled %>%
+ group_by(year,month,day) %>%
+ mutate(r=min_rank(desc(dep_time))) %>%
+ filter(r%in%range(r))
not_cancelled %>%
group_by(dest) %>%
summarize(carriers=n_distinct(carrier)) %>%
arrange(desc(carrier))
not_cancelled %>%
count(dest)
daily=group_by(flights,year,month,day)
per_day=summarize(daily,flights=n())
daily
per_day=summarize(daily,flights=n())
(per_day=summarize(daily,flights=n()))
per_month=summarise(per_day,flights=sum(flights))
per_month
per_years=summarise(per_month,flights=sum(flights))
per_years
daily %>%
ungroup() %>%
summarise(flights=n())
#quel heures
flights %>%
select(flights,arr_delay)
select(flights,arr_delay)
select(flights,arr_delay<=0)
select(flights,arr_delay=<0)
select(flights,arr_delay)
filter(flights,arr_day<=0)
arrange(arr_delay)
arrange(flights,arr_delay)
a=arrange(flights,arr_delay)
group_by(a,hour)
select(a,hour)
a=flights %>%
arrange(flights,arr_delay)
a
a=arrange(flights,arr_delay)
select(a,hour)
group_by(a,hour)
select(a,hour)
moy=select(flights,arr_delay,carrier)
moy
mutate(moy,arr_delay=mean(arr_delay))
mutate(moy,arr_delay=mean(arr_delay,na.rm=T))
MOY=mutate(moy,arr_delay=mean(arr_delay,na.rm=T))
MOY=mutate(moy,arr_delay=60*mean(arr_delay,na.rm=T))
##1
flights %>%
group_by(hour) %>%
summarise(moyenne=mean(arr_delay,na.rm=T)) %>%
arrange(moyenne) %>%
view()
##2
flights %>%
group_by(dest) %>%
summarise(retard=sum(arr_delay,na.rm = T))
##3
flights %>%
mutate(retard=sum(arr_delay,na.rm = T))
flights %>% + mutate(retard=sum(arr_delay,na.rm = T))
flights %>%  mutate(retard=sum(arr_delay,na.rm = T))
flights %>%  mutate(retard=sum(arr_delay,na.rm = T)),ungroup() %>%
flights %>%
mutate(retard=sum(arr_delay,na.rm = T))
flights %>%
mutate(retard=sum(arr_delay,na.rm = T)),ungroup() %>%
flights %>%
mutate(retard=sum(arr_delay,na.rm = T)),ungroup() %>%
flights %>%
mutate(retard=sum(arr_delay,na.rm = T))
a=flights %>%
mutate(retard=sum(arr_delay,na.rm = T))
ungroup(a)
ungroup() %>%
u
flights %>%
+ group_by(dest) %>%summarise(retard=sum(arr_delay,na.rm = T))
flights %>% group_by(dest) %>%summarise(retard=sum(arr_delay,na.rm = T))
nombre = flights %>% group_by(dest) %>%summarise(retard=sum(arr_delay,na.rm = T))
view(nombre)
a
flights %>%  mutate(retard=sum(arr_delay,na.rm = T)),ungroup() %>%
flights %>%
mutate(retard=sum(arr_delay,na.rm = T)),ungroup() %>%
ungroup(a) %>%
y
library(OptimisationDuPorteFeuille)
?matrice_covariance
git remote add origin https://github.com/Franck-Noumbo/Optimisation-Porte-Feuille.git
OptimisationDuPorteFeuille::git remote add origin https://github.com/Franck-Noumbo/Optimisation-Porte-Feuille.git
